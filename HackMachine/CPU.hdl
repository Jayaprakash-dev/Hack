/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // --- INSTRUCTION FETCH ---

    // Select between A-instruction (load address) or ALU output
    // if opcode == 1 then out = ALU output;
    // else A-instruction
    Not(in=instruction[15], out=AInstruction); // if opcode == 0 then !opcode == AInstruction
    Mux16(a=aluOut, b=instruction, sel=AInstruction, out=instructionOrAluOut);

    // A REGISTER: updated from instruction or ALU output
    // if (opcode == 1 and d1 == 1) or opcode == 0 then load = 1
    // else load = 0
    And(a=instruction[15], b=instruction[5], out=CInstruction);
    Or(a=CInstruction, b=AInstruction, out=aRegLoad);

    ARegister(in=instructionOrAluOut, load=aRegLoad, out=aRegOut, out[0..14] = addressM);

    // --- JUMP INSTRUCTION LOGIC (based on bits instruction[2..0]) ---

    // Invert ALU output flags
    Not(in=ng, out=notNg);
    Not(in=zr, out=notZr);

    And(a=instruction[15], b=instruction[0], out=jgt);
    And(a=notNg, b=notZr, out=positiveAluOut);
    And(a= jgt, b = positiveAluOut, out=pcLoad1);

    And(a= instruction[15], b = instruction[1], out = jeq);
    And(a = zr, b = jeq, out = pcLoad2);

    And(a = instruction[15], b = instruction[2], out = jlt);
    And(a = ng, b = jlt, out = pcLoad3);

    Or(a = pcLoad1, b = pcLoad2, out = pcLoad1Or2);
    Or(a = pcLoad1Or2, b = pcLoad3, out = isJmpChecked);

    // --- PROGRAM COUNTER (PC) LOGIC ---
    Not(in=isJmpChecked, out=doInc);
    // PC updates on jump (load), otherwise increments (pc++)
    PC(in=aRegOut, load=isJmpChecked, inc=doInc, reset=reset, out[0..14]=pc);

    // D REGISTER: load from ALU output on C-instruction
    // if opcode == 1 and d2 == 1 then load = 1
    // else load = 0
    And(a=instruction[15], b=instruction[4], out=dRegLoad);
    DRegister(in=aluOut, load=dRegLoad, out=dRegOut);

    // --- ALU EXECUTION (INSTRUCTION DECODE AND EXECUTE) ---

    // Choose ALU input: A (default) or M (RAM[A])
    // if opcode == 1 and a == 1 then accept `inM` (means, RHS of C-instruction contains `M`)
    // eg. M = M + 1
    // else A-Register output
    And(a=instruction[15], b=instruction[12], out=MInstruction);
    Mux16(a=aRegOut, b=inM, sel=MInstruction, out=aRegMuxInM);

    // ALU operation (zx, nx, zy, ny, f, no control bits from instruction)
    ALU(
        x=dRegOut, y=aRegMuxInM,
        zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6],
        out=aluOut, out=outM, zr=zr, ng=ng
    );

    // --- MEMORY INTERFACE ---

    // writeM = 1 if C-instruction and dest includes M
    // if opcode == 1 and d3 == 1 then writeM = 1
    // else writeM = 0
    And(a=instruction[15], b=instruction[3], out=writeM);
}
